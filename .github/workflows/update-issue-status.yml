name: Update Issue Status

on:
  push:
    branches-ignore:
      - main

jobs:
  update-issue-status:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract issue number from branch name
        id: extract_issue_number
        run: |
          echo "Branch reference: $GITHUB_REF"
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch name: $BRANCH_NAME"
          ISSUE_NUMBER=$(echo $BRANCH_NAME | grep -oP '(?<=/)\d+')
          echo "Extracted issue number: $ISSUE_NUMBER"
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "No issue number found in branch name"
            exit 1
          fi
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV

      - name: Get Issue Node ID
        id: get_issue_node_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ env.ISSUE_NUMBER }}
        run: |
          issue_query=$(jq -nc --arg issue_number "$ISSUE_NUMBER" --arg owner "${{ github.repository_owner }}" --arg name "${{ github.event.repository.name }}" '{query: "query { repository(owner: \"\($owner)\", name: \"\($name)\") { issue(number: \($issue_number)) { id } } }"}')
          echo "Issue Query: $issue_query"
          response=$(curl -s -X POST -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" --data "$issue_query" https://api.github.com/graphql)
          echo "Response: $response"
          issue_node_id=$(echo "$response" | jq -r '.data.repository.issue.id')
          echo "Issue Node ID: $issue_node_id"
          echo "::set-output name=issue_node_id::$issue_node_id"

      - name: Get Project Card ID
        id: get_project_card_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issue_node_id=${{ steps.get_issue_node_id.outputs.issue_node_id }}
          project_card_query=$(jq -nc --arg issue_node_id "$issue_node_id" '{query: "query { node(id: \($issue_node_id)) { ... on Issue { projectCards(first: 1) { edges { node { id } } } } } }"}')
          echo "Project Card Query: $project_card_query"
          response=$(curl -s -X POST -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" --data "$project_card_query" https://api.github.com/graphql)
          echo "Response: $response"
          project_card_id=$(echo "$response" | jq -r '.data.node.projectCards.edges[0].node.id')
          echo "Project Card ID: $project_card_id"
          echo "::set-output name=project_card_id::$project_card_id"

      - name: Move Project Card to "In Progress"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          project_card_id=${{ steps.get_project_card_id.outputs.project_card_id }}
          column_id="47fc9ee4"  # Replace with the actual column ID for "In Progress"
          move_card_mutation=$(jq -nc --arg project_card_id "$project_card_id" --arg column_id "$column_id" '{query: "mutation { moveProjectCard(input: {cardId: \($project_card_id), columnId: \($column_id)}) { clientMutationId } }"}')
          curl -s -X POST -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" --data "$move_card_mutation" https://api.github.com/graphql

