name: Update Issue Status

on:
  push:
    branches-ignore:
      - main

jobs:
  update-issue-status:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract issue number from branch name
        id: extract_issue_number
        run: |
          echo "Branch reference: $GITHUB_REF"
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch name: $BRANCH_NAME"
          ISSUE_NUMBER=$(echo $BRANCH_NAME | grep -oP '(?<=/)\d+')
          echo "Extracted issue number: $ISSUE_NUMBER"
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "No issue number found in branch name"
            exit 1
          fi
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV

      - name: Get Project Node ID
        id: get_project_node_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          project_query=$(jq -nc --arg org "${{ github.repository_owner }}" --arg number "1" '{query: "query { organization(login: \($org)) { projectV2(number: \($number)) { id } } }"}')
          echo "Project Query: $project_query"
          response=$(curl -s -X POST -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" --data "$project_query" https://api.github.com/graphql)
          echo "Response: $response"
          project_node_id=$(echo "$response" | jq -r '.data.organization.projectV2.id')
          echo "Project Node ID: $project_node_id"
          echo "::set-output name=project_node_id::$project_node_id"

      - name: Debug Project Node ID
        if: steps.get_project_node_id.outputs.project_node_id == ''
        run: echo "Project node ID is null. Check the query response above for errors."

      - name: Get Issue Node ID
        id: get_issue_node_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ env.ISSUE_NUMBER }}
        run: |
          issue_query=$(jq -nc --arg issue_number "$ISSUE_NUMBER" --arg owner "${{ github.repository_owner }}" --arg name "${{ github.event.repository.name }}" '{query: "query { repository(owner: \"\($owner)\", name: \"\($name)\") { issue(number: \($issue_number)) { id } } }"}')
          echo "Issue Query: $issue_query"
          response=$(curl -s -X POST -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" --data "$issue_query" https://api.github.com/graphql)
          echo "Response: $response"
          issue_node_id=$(echo "$response" | jq -r '.data.repository.issue.id')
          echo "Issue Node ID: $issue_node_id"
          echo "::set-output name=issue_node_id::$issue_node_id"

      - name: Get Project Item ID
        id: get_project_item_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NODE_ID: ${{ steps.get_issue_node_id.outputs.issue_node_id }}
          PROJECT_NODE_ID: ${{ steps.get_project_node_id.outputs.project_node_id }}
        run: |
          echo "Project Node ID: $PROJECT_NODE_ID"
          echo "Issue Node ID: $ISSUE_NODE_ID"
          project_item_query=$(jq -nc --arg project_id "$PROJECT_NODE_ID" --arg content_id "$ISSUE_NODE_ID" '{query: "mutation { addProjectV2ItemById(input: {projectId: \($project_id), contentId: \($content_id)}) { item { id } } }"}')
          echo "Project Item Query: $project_item_query"
          response=$(curl -s -X POST -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" --data "$project_item_query" https://api.github.com/graphql)
          echo "Response: $response"
          project_item_id=$(echo "$response" | jq -r '.data.addProjectV2ItemById.item.id')
          echo "Project Item ID: $project_item_id"
          echo "::set-output name=project_item_id::$project_item_id"

      - name: Move Project Item to "In Progress"
        if: steps.get_project_item_id.outputs.project_item_id != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_ITEM_ID: ${{ steps.get_project_item_id.outputs.project_item_id }}
        run: |
          column_id="47fc9ee4"  # Your actual column ID for "In Progress"
          move_item_mutation=$(jq -nc --arg project_item_id "$PROJECT_ITEM_ID" --arg column_id "$column_id" '{query: "mutation { moveProjectCard(input: {cardId: \($project_item_id), columnId: \($column_id)}) { clientMutationId } }"}')
          echo "Move Item Mutation: $move_item_mutation"
          response=$(curl -s -X POST -H "Authorization: bearer $GITHUB_TOKEN" -H "Content-Type: application/json" --data "$move_item_mutation" https://api.github.com/graphql)
          echo "Response: $response"
